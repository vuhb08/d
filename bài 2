class AVLNode:
    def __init__(self, key):
        """
        Node class for AVL Tree
        :param key: Value of the node
        """
        self.key = key
        self.height = 1  # Height of the node
        self.left = None
        self.right = None

class AVLTree:
    def get_height(self, node):
        """Get the height of the node."""
        if not node:
            return 0
        return node.height

    def get_balance(self, node):
        """Get the balance factor of the node."""
        if not node:
            return 0
        return self.get_height(node.left) - self.get_height(node.right)

    def rotate_right(self, y):
        """Perform a right rotation."""
        x = y.left
        T2 = x.right

        # Perform rotation
        x.right = y
        y.left = T2

        # Update heights
        y.height = 1 + max(self.get_height(y.left), self.get_height(y.right))
        x.height = 1 + max(self.get_height(x.left), self.get_height(x.right))

        return x

    def rotate_left(self, x):
        """Perform a left rotation."""
        y = x.right
        T2 = y.left

        # Perform rotation
        y.left = x
        x.right = T2

        # Update heights
        x.height = 1 + max(self.get_height(x.left), self.get_height(x.right))
        y.height = 1 + max(self.get_height(y.left), self.get_height(y.right))

        return y

    def insert(self, root, key):
        """Insert a new node with the given key into the AVL tree."""
        # Perform the normal BST insertion
        if not root:
            return AVLNode(key)

        if key < root.key:
            root.left = self.insert(root.left, key)
        elif key > root.key:
            root.right = self.insert(root.right, key)
        else:
            return root  # Duplicate keys are not allowed

        # Update the height of the ancestor node
        root.height = 1 + max(self.get_height(root.left), self.get_height(root.right))

        # Get the balance factor
        balance = self.get_balance(root)

        # If the node becomes unbalanced, then perform rotations

        # Left Left Case
        if balance > 1 and key < root.left.key:
            return self.rotate_right(root)

        # Right Right Case
        if balance < -1 and key > root.right.key:
            return self.rotate_left(root)

        # Left Right Case
        if balance > 1 and key > root.left.key:
            root.left = self.rotate_left(root.left)
            return self.rotate_right(root)

        # Right Left Case
        if balance < -1 and key < root.right.key:
            root.right = self.rotate_right(root.right)
            return self.rotate_left(root)

        return root

    def inorder_traversal(self, root):
        """Perform an inorder traversal of the AVL tree."""
        if not root:
            return []
        return self.inorder_traversal(root.left) + [root.key] + self.inorder_traversal(root.right)

    def preorder_traversal(self, root):
        """Perform a preorder traversal of the AVL tree."""
        if not root:
            return []
        return [root.key] + self.preorder_traversal(root.left) + self.preorder_traversal(root.right)

    def print_tree(self, root, level=0, prefix="Root: "):
        """Print the AVL tree structure."""
        if root is not None:
            print(" " * (level * 4) + prefix + str(root.key))
            if root.left or root.right:
                self.print_tree(root.left, level + 1, "L--- ")
                self.print_tree(root.right, level + 1, "R--- ")

# Example Usage
if __name__ == "__main__":
    avl = AVLTree()
    root = None

    # Input sequence (replace with the sequence given in class)
    sequence = [20, 10, 30, 5, 15, 25, 35]

    # Insert elements into AVL tree
    for value in sequence:
        root = avl.insert(root, value)

    # Print the tree structure
    print("AVL Tree Structure:")
    avl.print_tree(root)

    # Print traversals
    print("\nInorder Traversal:", avl.inorder_traversal(root))
    print("Preorder Traversal:", avl.preorder_traversal(root))
